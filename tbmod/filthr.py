#! /usr/bin/env python

"""
This program extracts the on-site energies and hopping integrals from
seedname_hr.datproduced by wannier90.x. The outputs are 'ons.dat' for on-site
energies and 'hop.dat' for hopping integrals.

The on-site energies are detected automatically and sorted according to the
local orbital indices. The hopping integrals are specified either via a 
threshold, or a file indicating the hopping terms which can be generated by
hopterm.dat or previous filthr.py run.

If the hopping integrals are specified via a threshold, they would be sorted
according to the real part of the Hamiltonian matrix element, and the conjugate
terms are reduced automatically. If specified via a file, the hopping terms are
kept as-it-is.

Usage: filthr.py seedname_hr.dat -t threshold
       filthr.py seedname_hr.dat -f hopterm.dat

Use the following settings when generating hopterm.dat:
  reduce_onsite = True
  output_flavor = 'matlab'
Also, specify 'reduce_conjugate = True' if you want to reduce the conjugate
terms.

Notes on the source code:
Hopterm.dat, seedname_hr.dat and hop.dat have similar data structure. To avoid
ambiguity, the coresponding arrays are identified as hopterm, hr and hop,
respectively.
"""

import sys

def readhr(hrname):
    hrfile = open(hrname)
    rawhr = hrfile.readlines()
    hrfile.close()
    # determine the first line of hopping integrals
    for line in rawhr[1:]:
        s = line.split()
        # keep in mind that this criterion is vulnerable
        if len(s) == 7 and int(s[0]) <= 0:
            nl0 = rawhr.index(line)
            break
    # parse rawhr
    hr = []
    for line in rawhr[nl0:]:
        s = line.split()
        # we change the order of columns for compatibility with hopterm.py
        hr.append([int(s[3]), int(s[4]), int(s[0]), int(s[1]), int(s[2]), float(s[5]), float(s[6])])
    return hr

def readhopterm(hoptermname):
    hoptermfile = open(hoptermname)
    rawhopterm = hoptermfile.readlines()
    hoptermfile.close()
    hopterm = []
    for line in rawhopterm:
        s = line.split()
        # in case where there are comments and blank lines in hopterm.dat
        if line.find("#") == -1 and len(s) == 6:
            # the last column (distance) is dropped
            hopterm.append([int(s[0]), int(s[1]), int(s[2]), int(s[3]), int(s[4])])
    return hopterm

def extrons(hr):
    ons = []
    for hri in hr:
            if hri[0] == hri[1] and hri[2:5] == [0,0,0]:
                ons.append(hri)
    # sort ons according to the local orbital index
    ons = sorted(ons, key = lambda x: x[0])
    return ons

def extrhop_hopterm(hr, hopterm):
    hop = []
    for hoptermi in hopterm:
        for hri in hr:
            if hri[0:5] == hoptermi:
                hop.append(hri)
    return hop

def extrhop_threshold(hr, threshold):
    hop = []
    for hri in hr:
        # checks if this hij(R) >= threshold and if it is not an on-site term
        if (abs(hri[5]) >= threshold) and not (hri[0] == hri[1] and hri[2:5] == [0,0,0]):
            hop.append(hri)
    # sort hop according to the abs of real part of Hamiltonian
    # It also boost check_conj to a factor of 50%
    hop = sorted(hop, key = lambda x: abs(x[5]), reverse = True)
    hop_reduced = []
    for hopi in hop:
        if check_conj(hop_reduced, hopi):
            hop_reduced.append(hopi)
    return hop_reduced

def check_conj(hop, hopi):
    flag = True
    i1 = hopi[0]
    j1 = hopi[1]
    for hopk in reversed(hop):
        i2 = hopk[0]
        j2 = hopk[1]
        dR = [hopi[2]+hopk[2], hopi[3]+hopk[3], hopi[4]+hopk[4]]
        if (i1==j2) and (j1==i2) and (dR==[0,0,0]):
            flag = False
            break
    return flag

def writedat(fnm, dat):
    ofile = open(fnm, "w")
    for line in dat:
        ofile.write("%5d%5d%5d%5d%5d%12.6f%12.6f\n" % (line[0], line[1], line[2], line[3], line[4], line[5], line[6]))
    ofile.close()

def main():
    if len(sys.argv) != 4:
        print("Usage: filthr.py seedname_hr.dat -f hopterm.dat")
        print("    or filthr.py seedname_hr.dat -t threshold")
        sys.exit(-1)
    else:
        hr = readhr(sys.argv[1])
        ons = extrons(hr)
        mode = sys.argv[2]
        if mode == "-f":
            hopterm = readhopterm(sys.argv[3])
            hop = extrhop_hopterm(hr, hopterm)
        elif mode == "-t":
            threshold = float(sys.argv[3])
            hop = extrhop_threshold(hr, threshold)
        else:
            print("Unknown option " + mode)
            sys.exit(-1)
        writedat("ons.dat", ons)
        writedat("hop.dat", hop)

if __name__ == "__main__":
    main()
